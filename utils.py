from hashlib import sha256
from typing import List
from utilitybelt import dev_urandom_entropy


def xor_all(x: List[bytes]) -> bytes:
    """XORs all the bytes in the list together."""
    result = x[0]
    for i in range(1, len(x)):
        result = bytes([a ^ b for a, b in zip(result, x[i])])
    return result


def int_to_bytes(x: int) -> bytes:
    """Converts an integer to bytes."""
    return x.to_bytes((x.bit_length() + 7) // 8, 'big')


def bytes_to_int(x: bytes) -> int:
    """Converts bytes to an integer."""
    return int.from_bytes(x, 'big')


def bytes_to_binary(x: bytes) -> str:
    """Converts bytes to a binary string."""
    return ''.join(format(b, '08b') for b in x)


def generate(n: int, nonce: int) -> (bytes, bytes):
    """Generates a number of random bytes and hashes them with the nonce."""
    random_bytes = dev_urandom_entropy(n)
    random_hash = sha256(random_bytes + int_to_bytes(nonce)).digest()
    return random_bytes, random_hash


def verify(random_bytes: bytes, nonce: int, random_hash: bytes) -> bool:
    """Verifies that the random bytes were generated by the given nonce."""
    return random_hash == sha256(random_bytes + int_to_bytes(nonce)).digest()